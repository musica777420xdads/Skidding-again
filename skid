-- Enhanced Level-Based Dungeon Autofarm Script
-- Automatically farms dungeons based on level
-- Features: Level-based dungeon switching, auto combat, auto movement

repeat
    task.wait()
until game:IsLoaded()
    and game.Players.LocalPlayer
    and game.Players.LocalPlayer.Character
    and game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart')

task.wait(3)

-- Services
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local TweenService = game:GetService('TweenService')
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')

local player = Players.LocalPlayer

-- Wait for leaderstats
repeat
    task.wait()
until player:FindFirstChild('leaderstats')
    and player.leaderstats:FindFirstChild('Level')

local playerLevel = player.leaderstats.Level.Value
print('Player Level:', playerLevel)

-- ========================================
-- DUNGEON FARMING SYSTEM
-- ========================================

-- Level-based dungeon configuration
local function getDungeonConfig(level)
    if level >= 0 and level <= 14 then
        return { 'ForestDungeon', 4, 1, false, false } -- Forest 0-14
    elseif level >= 15 and level <= 29 then
        return { 'MountainDungeon', 4, 1, false, false } -- Orion 15-29 (Mountain)
    elseif level >= 30 and level <= 44 then
        return { 'CaveDungeon', 4, 1, false, false } -- Cave 30-44
    elseif level >= 45 and level <= 59 then
        return { 'CastleDungeon', 4, 1, false, false } -- Castle 45-59
    elseif level >= 60 and level <= 74 then
        return { 'JungleDungeon', 4, 1, false, false } -- Jungle 60-74
    elseif level >= 75 and level <= 89 then
        return { 'AstralDungeon', 4, 1, false, false } -- Astral 75-89
    elseif level >= 90 and level <= 104 then
        return { 'DesertDungeon', 4, 1, false, false } -- Desert 90-104
    elseif level >= 105 and level <= 119 then
        return { 'CaveDungeon', 4, 1, false, false } -- Cave Dungeon 105-119
    elseif level >= 120 and level <= 134 then
        return { 'MushroomDungeon', 4, 1, false, false } -- Mushroom 120-134
    elseif level >= 135 then
        return { 'GoldDungeon', 4, 1, false, false } -- Gold 135+
    else
        return { 'ForestDungeon', 4, 1, false, false } -- Default fallback
    end
end

-- Get dungeon configuration based on current level
local dungeonArgs = getDungeonConfig(playerLevel)
print('Selected Dungeon:', dungeonArgs[1], '| Difficulty:', dungeonArgs[2])

-- Get current dungeon name from PlaceId
local function getCurrentDungeon()
    local placeId = tostring(game.PlaceId)

    -- Check PlaceId to determine current dungeon
    if placeId == '81734311524009' then
        return 'ForestDungeon'
    elseif placeId == '137618699134093' then
        return 'CoveDungeon' -- Pirate Cove
    elseif placeId == '73902695042860' then
        return 'MountainDungeon' -- Orion (Second island)
    elseif placeId == '126046773825086' then
        return 'CaveDungeon' -- Shimmering
    elseif placeId == '99288631985906' then
        return 'CastleDungeon'
    elseif placeId == '135364962469129' then
        return 'JungleDungeon'
    elseif placeId == '71150884252164' then
        return 'DesertDungeon'
    elseif placeId == '137506446187082' then
        return 'MushroomDungeon'
    elseif placeId == '109839406390472' then
        return 'AstralDungeon'
    elseif placeId == '122372710407259' then
        return 'GoldDungeon'
    elseif placeId == '94845773826960' then
        return nil -- Lobby
    else
        return 'Unknown'
    end
end

-- Enter the appropriate dungeon
local function enterDungeon()
    pcall(function()
        ReplicatedStorage
            :WaitForChild('Systems')
            :WaitForChild('Parties')
            :WaitForChild('SetSettings')
            :FireServer(unpack(dungeonArgs))
        print('Entered dungeon:', dungeonArgs[1])
    end)
end

-- Return to lobby function
local function returnToLobby()
    pcall(function()
        ReplicatedStorage
            :WaitForChild('Systems')
            :WaitForChild('Dungeons')
            :WaitForChild('ExitDungeon')
            :FireServer()
        print('Returned to lobby')
    end)
end

-- Kill Aura functionality
local killAuraRunning = true
local function startKillAura()
    task.spawn(function()
        while killAuraRunning do
            pcall(function()
                local enemies = Workspace:FindFirstChild('Mobs')
                if enemies then
                    local mobs = {}
                    for _, v in ipairs(enemies:GetChildren()) do
                        if v:GetAttribute('HP') and v:GetAttribute('HP') > 0 then
                            table.insert(mobs, v)
                        end
                    end

                    if #mobs > 0 then
                        ReplicatedStorage
                            :WaitForChild('Systems')
                            :WaitForChild('Combat')
                            :WaitForChild('PlayerAttack')
                            :FireServer(mobs)
                    end
                end
            end)
            task.wait(0.22)
        end
    end)
end

-- Auto Start functionality
local autoStartRunning = true
local function startAutoStart()
    task.spawn(function()
        while autoStartRunning do
            pcall(function()
                ReplicatedStorage
                    :WaitForChild('Systems')
                    :WaitForChild('Dungeons')
                    :WaitForChild('TriggerStartDungeon')
                    :FireServer()
            end)
            task.wait(0.2)
        end
    end)
end

-- Enhanced Auto Play Again functionality
local autoPlayAgainRunning = true
local function startAutoPlayAgain()
    task.spawn(function()
        while autoPlayAgainRunning do
            pcall(function()
                local args = { 'GoAgain' }
                ReplicatedStorage
                    :WaitForChild('Systems')
                    :WaitForChild('Dungeons')
                    :WaitForChild('SetExitChoice')
                    :FireServer(unpack(args))

                -- Check current level and get new dungeon config
                local currentLevel = player.leaderstats.Level.Value
                local newDungeonArgs = getDungeonConfig(currentLevel)

                -- Check if we need to switch dungeons
                local currentDungeon = getCurrentDungeon()

                if currentDungeon == newDungeonArgs[1] then
                    -- Already in the correct dungeon for new level
                    print('Level', currentLevel, '- Already in correct dungeon:', currentDungeon)
                    dungeonArgs = newDungeonArgs
                elseif newDungeonArgs[1] ~= dungeonArgs[1] then
                    -- Level changed and need different dungeon
                    print('Level changed! Current dungeon:', currentDungeon or 'Unknown')
                    print('New level:', currentLevel, '| Target dungeon:', newDungeonArgs[1])

                    print('Switching dungeons...')

                    -- Exit to lobby first if in a dungeon
                    if currentDungeon ~= nil then
                        print('Exiting current dungeon...')
                        returnToLobby()
                        task.wait(5)
                    end

                    dungeonArgs = newDungeonArgs

                    -- Enter the new appropriate dungeon
                    ReplicatedStorage
                        :WaitForChild('Systems')
                        :WaitForChild('Parties')
                        :WaitForChild('SetSettings')
                        :FireServer(unpack(dungeonArgs))
                    print('Entered new dungeon:', dungeonArgs[1])
                    task.wait(3)
                else
                    -- Same level range, same dungeon - keep farming
                    print('Level', currentLevel, '- Continuing in', dungeonArgs[1])
                end
            end)
            task.wait(6) -- Wait before next cycle
        end
    end)
end

-- Auto Farm Dungeon functionality
local autoFarmRunning = true
local tweenSpeed = 190
local yOffset = 50

local function getClosestMob()
    local mob = nil
    local distance = math.huge
    local enemies = Workspace:FindFirstChild('Mobs')

    if not enemies then
        return nil
    end

    for _, v in pairs(enemies:GetChildren()) do
        if
            not v:GetAttribute('Owner')
            and v:GetAttribute('HP')
            and v:GetAttribute('HP') > 0
            and v.Name ~= 'Side Room Rune Disabled'
            and v.Name ~= 'TargetDummy'
        then
            local character = player.Character
            if character and character:FindFirstChild('HumanoidRootPart') then
                local dist = (
                    v:GetPivot().Position - character:GetPivot().Position
                ).Magnitude
                if dist < distance then
                    distance = dist
                    mob = v
                end
            end
        end
    end

    return mob
end

local function startAutoFarm()
    task.spawn(function()
        while autoFarmRunning do
            pcall(function()
                local mob = getClosestMob()
                if mob and player.Character and player.Character:FindFirstChild('HumanoidRootPart') then
                    task.wait(0.2)

                    local velocityConnection = RunService.Heartbeat:Connect(
                        function()
                            if
                                player.Character
                                and player.Character:FindFirstChild('HumanoidRootPart')
                            then
                                player.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
                                player.Character.HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero
                            end
                        end
                    )

                    local character = player.Character
                    local hrp = character and character:FindFirstChild('HumanoidRootPart')

                    if hrp and mob then
                        local to = mob:GetPivot().Position
                        local distance = (to - hrp.Position).Magnitude
                        local tween = TweenService:Create(
                            hrp,
                            TweenInfo.new(
                                math.min(distance / tweenSpeed, 10), -- Cap tween time to prevent extremely long tweens
                                Enum.EasingStyle.Linear,
                                Enum.EasingDirection.Out
                            ),
                            {
                                CFrame = CFrame.new(to + Vector3.new(0, yOffset, 0)),
                            }
                        )
                        tween:Play()
                        tween.Completed:Wait()
                    end

                    if velocityConnection then
                        velocityConnection:Disconnect()
                    end
                end
            end)
            task.wait(0.1)
        end
    end)
end

-- ========================================
-- ANTI-AFK SYSTEM
-- ========================================

-- Anti-AFK functionality
local antiAfkRunning = true
local function startAntiAfk()
    task.spawn(function()
        while antiAfkRunning do
            pcall(function()
                local VirtualUser = game:GetService('VirtualUser')
                -- Simulate player activity to prevent AFK kick
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                
                print('🔄 Anti-AFK activated')
            end)
            task.wait(10) -- Check every 10 seconds
        end
    end)
end

-- ========================================
-- MAIN EXECUTION
-- ========================================

print('🚀 Starting Enhanced Level-Based Autofarm...')
print('Target Dungeon:', dungeonArgs[1])

-- Check if already in correct dungeon by PlaceId
local currentDungeon = getCurrentDungeon()
local targetDungeon = dungeonArgs[1]

if currentDungeon == targetDungeon then
    print('Already in correct dungeon! PlaceId matches target:', targetDungeon)
    print('Skipping dungeon entry, starting farm...')
elseif currentDungeon == nil then
    print('In lobby, entering dungeon:', targetDungeon)
    enterDungeon()
    task.wait(2)
else
    print('In wrong dungeon! Current:', currentDungeon, '| Target:', targetDungeon)
    print('Exiting and entering correct dungeon...')
    returnToLobby()
    task.wait(5)
    enterDungeon()
    task.wait(2)
end

-- Start all automation
startKillAura()
startAutoStart()
startAutoPlayAgain()
startAutoFarm()
startAntiAfk()

print('✅ Enhanced Autofarm started successfully!')
print('Kill Aura: ON')
print('Auto Start: ON')
print('Auto Play Again: ON')
print('Auto Farm Dungeon: ON')
print('Anti-AFK: ON')

-- Optional: Stop functions (for manual control)
--[[
To stop the farm, you can set these to false:
killAuraRunning = false
autoStartRunning = false
autoPlayAgainRunning = false
autoFarmRunning = false
antiAfkRunning = false
--]]
